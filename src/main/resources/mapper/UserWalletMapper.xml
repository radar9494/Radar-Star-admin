<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liuqi.business.mapper.UserWalletMapper">

	<!-- 常用查询 -->
	<sql id="allColumn">
		<trim suffixOverrides=",">
			t.id,t.update_time,t.create_time,t.remark,t.version,
			t.user_id,t.currency_id,t.using,t.freeze,t.gateway_switch
		</trim>
	</sql>

    <!-- 数据库和实体映射  对应数据库实体-->
	<resultMap type="userWalletModel" id="userWallet">
	    <result property="id" column="id"/>
	    <result property="updateTime" column="update_time"/>
	    <result property="createTime" column="create_time"/>
	    <result property="remark" column="remark"/>
	    <result property="version" column="version"/>
		<result property="userId" column="user_id"/>
		<result property="currencyId" column="currency_id"/>
		<result property="using" column="using"/>
		<result property="freeze" column="freeze"/>
		<result property="gatewaySwitch" column="gateway_switch"/>
	</resultMap>
    <!-- dto映射  添加的字段放在这块-->
    <resultMap type="userWalletModelDto" extends="userWallet" id="userWalletDto">
    </resultMap>

	<!-- 新增 -->
	<insert id="insert" keyColumn="id" keyProperty="id" useGeneratedKeys="true" parameterType="userWalletModel">
		insert into t_user_wallet(
		<trim  suffixOverrides=",">
			`update_time`,`create_time`,`remark`,`version`,
			`user_id`,`currency_id`,`using`,`freeze`,gateway_switch
		</trim>
		) values(
		<trim suffixOverrides=",">
			#{updateTime},#{createTime},#{remark},#{version},
			#{userId},#{currencyId},#{using},#{freeze},	#{gatewaySwitch}
		</trim>
		)
	</insert>

	<!-- 更新 -->
	<update id="update" parameterType="userWalletModel">
		update  t_user_wallet
		<set>
		    <if test="updateTime != null">
                `update_time` = #{updateTime},
            </if>
		    <if test="createTime != null">
                `create_time` = #{createTime},
            </if>
		    <if test="remark != null">
                `remark` = #{remark},
            </if>
			<if test="userId != null">
                    `user_id` = #{userId},
            </if>
            <if test="currencyId != null">
                    `currency_id` = #{currencyId},
            </if>
            <if test="using != null">
                    `using` = #{using},
            </if>
            <if test="freeze != null">
                    `freeze` = #{freeze},
            </if>
			<if test="gatewaySwitch != null">
				`gateway_switch` = #{gatewaySwitch},
			</if>
				`version` = #{version}+1,
		</set>
		where id = #{id} and `version` = #{version}
	</update>

    <update id="modifyWallet">
		update  t_user_wallet
		set
			`using` = `using`+#{changeUsing},
			`freeze` = `freeze`+#{changeFreeze}
		where
			`user_id` = #{userId}
			AND `currency_id` = #{currencyId}
			AND `using`>=0-#{changeUsing}
			AND `freeze`>=0-#{changeFreeze}
	</update>

	<update id="modifyWalletUsing">
		update  t_user_wallet
		set
			`using` = `using`+#{changeUsing}
		where
			`user_id` = #{userId}
			AND `currency_id` = #{currencyId}
			AND `using`>=0-#{changeUsing}
	</update>

	<update id="modifyWalletFreeze">
		update  t_user_wallet
		set
			`freeze` = `freeze`+#{changeFreeze}
		where
			`user_id` = #{userId}
			AND `currency_id` = #{currencyId}
			AND `freeze`>=0-#{changeFreeze}
	</update>


    <!-- 查询 -->
	<select id="getById" resultMap="userWalletDto">
		select <include refid="allColumn"></include> 
		from  t_user_wallet t 
		where t.id = #{id}
	</select>
	<!-- 查询 -->
	<select id="getByIds" resultMap="userWalletDto">
		select <include refid="allColumn"></include> 
		from  t_user_wallet t 
		where  t.id in
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</select>


	<!-- 查询列表 -->
	<select id="queryList" parameterType="userWalletModelDto" resultMap="userWalletDto">
		select <include refid="allColumn"></include>
		from  t_user_wallet t
		<trim prefix="where" prefixOverrides="AND|OR">
		
			<if test="id != null  ">
				AND t.id = #{id}
			</if>
		
			<if test="updateTime != null  ">
				AND t.update_time = #{updateTime}
			</if>
		
			<if test="createTime != null  ">
				AND t.create_time = #{createTime}
			</if>
		
			<if test="remark != null  and  remark != '' ">
				AND t.remark = #{remark}
			</if>
		
			<if test="version != null  ">
				AND t.version = #{version}
			</if>
		
			<if test="userId != null  and userId &gt; -2">
				AND t.user_id = #{userId}
			</if>

			<if test="currencyId != null  and currencyId &gt; -2">
				AND t.currency_id = #{currencyId}
			</if>

			<if test="using != null  ">
				AND t.using = #{using}
			</if>

			<if test="freeze != null ">
				AND t.freeze = #{freeze}
			</if>
			<if test="startCreateTime!=null">
				and t.create_time>#{startCreateTime}
			</if>
			<if test="endCreateTime!=null">
				<![CDATA[and t.create_time<=#{endCreateTime}]]>
			</if>
			<if test="currencyList!=null">
				AND t.currency_id in
				<foreach collection="currencyList" item="item" open="(" close=")" separator=",">
					#{item}
				</foreach>
			</if>
		</trim>
		
		<!-- 排序 -->
		<if test="sortName != null and sortName!=''">
			order by t.${sortName}
            <if test="sortType != null and sortType!=''">
                 ${sortType}
            </if>
		</if>

	</select>

	<select id="getByUserAndCurrencyId" resultMap="userWalletDto">
		select <include refid="allColumn"></include> from  t_user_wallet t where t.user_id = #{userId} AND t.currency_id = #{currencyId}
	</select>



	<select id="getTotal" resultMap="userWalletDto">
		select  ifnull(sum(`using`),0) as `using`,
		        ifnull(sum(`freeze`),0) as `freeze`
		from  t_user_wallet t  join t_user u on t.user_id=u.id
		where t.currency_id = #{currencyId}
		<if test="status != null  and status &gt; -2">
			AND u.status = #{status}
		</if>
	</select>

</mapper>